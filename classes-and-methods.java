/************************************   Human.java  ************************************/

/**
 *
 * Класс позволяет обьединить в одну логическую сущность
 * совокупность данных  и действий над ними (поля класса и методы класса соответственно)
 *
 * Обьявление класса: (треугольные скобки не надо)
      public class <Тут имя класса> {
            <Тут содержание класса>
      }

 * Стоит разлечать КЛАСС и ОБЬЕКТ: класс - это абстрактная совокупность данных и действий (методов),
 * а ОБЬЕКТ - это какой-то конкретный ЭКЗЕМПЛЯР класса (например, каждый отдельно созданный человек - это обьект,
 * но само понятие человек - это класс).
 * Ниже приводится обьявление класса "Человек", где описывается какие параметры и какие действия
 * может делать человек как класс, впринципе.
 *
 * А вот конкретные ОБЬЕКТЫ (экземпляры) класса "Человек" создаются там, где это необходимо (у нас это в функции main)
 */
public class Human {
    /**
     * 1) Поля класса - данные которые хранит класс
     *
     * Заметьте, тут мы не знаем конкретные имя, возраст, и т. д.,
     * а просто говорим что такие поля есть у класса Человек.
     * Т.е. у каждого экземпляра данного класса будут такие поля (и у каждого экземпляра будут храниться
     * разные значения в этих полях)
     * */
    public String name; // Имя
    public int age; // Возраст
    public float height; // Рост

    /**
     * 2) Методы класса - операции, которые может выполнять класс
     *
     * Сдесь мы можем оперировать данными, делать какие-то действия и возвращать результат.
     * Ниже примеры, как обьявить метод (т.е. описать название метода, его аргументы,
     * тип результата, и действия, которые он выполняет).
     * см. слайд 8 с презентации
     */

    /**
     * 2.1) Пример метода, который делает какие-то операции, но ничего не возвращает: тип результата - void (т.е. ничего)
     * Также, этот метод не имеет аргументов (о чем свидетельствуют пустые круглые скобки после названия метода)
      */
    public void grow() {
        // Тут мы можем обращаться к полям класса и менять их

        age++; // то же самое, что age = age + 1;

        if(age >= 150){
            return; // Оператор return; - выйти из метода (прекратить выполнение)
        }

        height += 10; // то же самое, что height = height + 10;
    }

    /**
     * 2.2) Пример метода, который возвращает какие-то данные. В данном случае метод возвращает целое число
     * В данном случае тип результата - int (целое число). Аргументов метод тоже не имеет.
      */
    public int getAge() {
        // Вернуть текущий возраст обьекта
        return age; // Оператор return <ЗНАЧЕНИЕ>; - выйти из метода, и вернуть <ЗНАЧЕНИЕ> туда, откуда его вызвали
                    // Учтите, что <ЗНАЧЕНИЕ> должно быть такого же типа, как в обьявлении метода
    }

    /**
     * 2.3) Пример метода с аргументами, который ничего не возвращает
     *
     * Аргументы пишутся в круглых скобках после названия метода. Если их больше чем 1, то писать их нужно через запятую
     * Когда мы обьявляем метод, мы можем оперировать аргументами как переменными, не зная их конкретного значения
     *
     * newName - аргумент-переменная типа String
     *
     * Когда мы будем вызывать этот метод (например, 'me.changeName("Новое имя");', где me - переменная типа Human),
     * то переменная newName будет содержать значение, которое мы указали в скобках (напр. "Новое имя")
     */
    public void changeName(String newName){ // Данный метод изменяет имя обьекта (человека)
        System.out.println("Старое имя: " + name);
        System.out.println("Новое имя: " + newName);
        name = newName; // Здесь мы записываем в поле name новое значение
    }

    /**
     * 2.4) То же самое, что 2.3, только назовем аргумент по-другому
     *
     * Здесь имя аргумента (name) совпадает с именем поля класса (тоже name), и когда мы в методе напишем
     * например 'System.out.println(name);', то вместо поля класса, подставится значение
     * аргумента (здесь это будет новое имя). А для того, чтобы получить доступ к полю класса, нужно
     * перед идентификатором написать 'this.': получится this.name
     *
     * Еще раз: внутри данного метода
     *      name - аргумент, который передается в метод
     *      this.name - поле класса
     */
    public void changeNameWithThis(String name){
        System.out.println("Старое имя: " + this.name);
        System.out.println("Новое имя: " + name);

        this.name = name;

        name = name; // Такая запись ничего не даст, так как мы обращаемся не к полю класса а к переменной-аргументу name,
                     // и присваеваем в нее саму же себя
    }

    /**
     * Конструктор - специальный метод класса, который создает ОБЬЕКТ (экземпляр класса).
     * Он, как и обычный метод, может быть без параметров, или с параметрами
     *
     * Вызов осуществляется с помощью оператора new:
     *      Human me = new Human(<Тут передаем параметры>);
     *
     * Обратите внимание, что здесь тоже нужно писать 'this.` перед полем класса, если переменная-аргумент имеет
     * такое же имя, что и поле класса.
     */

    public Human(String name){
        age = 0;            // Здесь мы можем задать начальные значения полей класса
                            // Это могут быть как константные значение (напр., 0)
        this.name = name;   // Так и аргументы конструктора
        height = 50f;   // 50f - константа типа float
                        // константа - українсько "стале значення"

        System.out.println("Human " + name + " was created");   // Также, мы можем делать любые другие действия, например
                                                                // выводить что-либо в консоль


        // TODO: сделать так, чтобы конструктор принимал и записывал не только имя, но и рост
    }

    /** Примечание: для порядка выкладки информации я разместил конструктор внизу класса, но обычно это делают
     * под обьявлением полей в классе. Т.е. структура должна быть такой:
     *
     *       public class <Название класса> {
     *              <Поля класса>
     *
     *              <Конструктор класса>
     *
     *              <Методы класса>
     *       }
     *
     * В ДЗшках буду требовать, чтобы она была соблюдена
     *
     *
     *  Условные обозначения
     *  //TODO: ... - самостоятельное задание; на практике применяют чтобы оставить пометку "сделать позже" (от англ. to do - сделать)
     */

}






/************************************   Lesson3.java  ************************************/


/**
 * Как можно подметить, Lesson3 - тоже класс, потому что в Java класс - это базовое понятие, и все что мы пишем должно
 * содержаться внутри какого-то класса.
 * Но, данный класс используется лишь для того, чтобы описать в нем метод main - точку входа в приложение.
 *
 * Данный метод ВСЕГДА обьявляется одинаково: public static void main(String[] args) {  <код>  }
 * (отличается только код внутри фигурных скобок).
 */
public class Lesson3 {
    public static void main(String[] args) {

        // Здесь мы создаем обьекты (экземпляры) класса Human с помощью ключегого слова new, и записываем этот обьект
        // в переменную такого же типа:
        //    <Название класса> <название переменной> = new <Название класса>(<аргументы>);
        // При этом вызывается конструктор класса

        Human vasya = new Human("Vasya"); // В скобках не нужно писать 'name:', лишь значение которое мы хотим передать (напр. "Vasya")
        Human petya = new Human("Petya");
        // Теперь мы имеем два обьекта класса , и у каждого из них свои значения в полях name, age, и т.д.

        // Попробуем обратиться к полю класса напрямую, и выведем имя человека в консоль. Делается это через точку:
        // '<имя переменной>.<имя поля класса>' (без кавычек и треугольных скобок)
        System.out.println(vasya.name);

        // Теперь попробуем вызвать метод класса (делается это тоже через точку):
        // <имя переменной>.<имя метода>(<аргументы>)
        // Прим.: аргументов может и не быть, тогда пустые скобки

        petya.grow(); // вызов метода без аргументов и без возвращаемого значения

        int petyaAge = petya.getAge(); // вызов метода без аргументов, но с возвращаемым значением, и запись результата в
                                       // переменную соответствующего типа


    }
}

